/*
 * Buzzchat server API
 * Instant Messaging App server API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aymane.menfaa@insa-rennes.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;
import okhttp3.OkHttpClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.UserCredentialsDTO;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for MessageApi
 */

/**
 * NB :
 * <p>
 * <p>
 * <p>
 * <p>
 * Les méthodes contenant le messageId ne peuvent pas être testés vu qu'on a des DTO qui ne contiennent pas l'id
 * + l'id est généré de manière aléatoire par la base de données (donc impossible d'avoir l'id du message)
 */

public class MessageApiTest {
  private final MessageApi api = new MessageApi();
  private MonCookieJar MonCookie;
  private final ConversationApi apiConv = new ConversationApi();
  private final AuthenticationApi apiAuth = new AuthenticationApi();
  private final UserApi userapi = new UserApi();

  @BeforeEach
  public void init() {
    MonCookie = new MonCookieJar();
    OkHttpClient.Builder builder = new OkHttpClient.Builder();
    OkHttpClient okHttpClient = builder.cookieJar(MonCookie).build();
    ApiClient apiClient = new ApiClient(okHttpClient);
    apiAuth.setApiClient(apiClient);
    api.setApiClient(apiClient);
    apiConv.setApiClient(apiClient);
  }
  private UserCredentialsDTO user1 = new UserCredentialsDTO()
    .login("aymane")
    .password("pwd")
    .email("aymane@buzzchat.com")
    .dateDeNaissance("26/02/2002")
    .prenom("Aymane")
    .nom("Menfaa")
    .photo("assets/photo.png");

  private UserCredentialsDTO user2 = new UserCredentialsDTO()
    .login("hamza")
    .password("pwd")
    .email("hamza@buzzchat.com")
    .dateDeNaissance("26/02/2002")
    .prenom("Hamza")
    .nom("Azer")
    .photo("assets/photo.png");

  /**
   * Add reaction to a message
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void addReactionTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Delete a message
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteMessageTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Get all messages of a conversation
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAllMessagesOfConversationTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Get the last messages of a conversation
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getLastMessageOfConversationTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Get reactions of a message
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getReactionTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Create a new message
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void messagePostTest() throws ApiException {
    assertEquals(true, true);
  }

  /**
   * Remove reaction from a message
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void removeReactionTest() throws ApiException {
    assertEquals(true, true);
  }
}
