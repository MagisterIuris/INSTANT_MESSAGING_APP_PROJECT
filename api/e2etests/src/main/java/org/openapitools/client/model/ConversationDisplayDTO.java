/*
 * Buzzchat server API
 * Instant Messaging App server API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aymane.menfaa@insa-rennes.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.client.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ConversationDisplayDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConversationDisplayDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "lastMessage";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private String lastMessage;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public ConversationDisplayDTO() {
  }

  public ConversationDisplayDTO id(String id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ConversationDisplayDTO from(String from) {

    this.from = from;
    return this;
  }

  /**
   * Get from
   *
   * @return from
   **/
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public ConversationDisplayDTO to(String to) {

    this.to = to;
    return this;
  }

  /**
   * Get to
   *
   * @return to
   **/
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public ConversationDisplayDTO picture(String picture) {

    this.picture = picture;
    return this;
  }

  /**
   * Get picture
   *
   * @return picture
   **/
  @javax.annotation.Nullable
  public String getPicture() {
    return picture;
  }


  public void setPicture(String picture) {
    this.picture = picture;
  }


  public ConversationDisplayDTO lastMessage(String lastMessage) {

    this.lastMessage = lastMessage;
    return this;
  }

  /**
   * Get lastMessage
   *
   * @return lastMessage
   **/
  @javax.annotation.Nullable
  public String getLastMessage() {
    return lastMessage;
  }


  public void setLastMessage(String lastMessage) {
    this.lastMessage = lastMessage;
  }


  public ConversationDisplayDTO timestamp(Long timestamp) {

    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   *
   * @return timestamp
   **/
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationDisplayDTO conversationDisplayDTO = (ConversationDisplayDTO) o;
    return Objects.equals(this.id, conversationDisplayDTO.id) &&
      Objects.equals(this.from, conversationDisplayDTO.from) &&
      Objects.equals(this.to, conversationDisplayDTO.to) &&
      Objects.equals(this.picture, conversationDisplayDTO.picture) &&
      Objects.equals(this.lastMessage, conversationDisplayDTO.lastMessage) &&
      Objects.equals(this.timestamp, conversationDisplayDTO.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, from, to, picture, lastMessage, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationDisplayDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("picture");
    openapiFields.add("lastMessage");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationDisplayDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ConversationDisplayDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationDisplayDTO is not found in the empty JSON string", ConversationDisplayDTO.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ConversationDisplayDTO.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationDisplayDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
    }
    if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
    }
    if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
    }
    if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
    }
    if ((jsonObj.get("lastMessage") != null && !jsonObj.get("lastMessage").isJsonNull()) && !jsonObj.get("lastMessage").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `lastMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessage").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ConversationDisplayDTO.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ConversationDisplayDTO' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ConversationDisplayDTO> thisAdapter
        = gson.getDelegateAdapter(this, TypeToken.get(ConversationDisplayDTO.class));

      return (TypeAdapter<T>) new TypeAdapter<ConversationDisplayDTO>() {
        @Override
        public void write(JsonWriter out, ConversationDisplayDTO value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public ConversationDisplayDTO read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationDisplayDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationDisplayDTO
   * @throws IOException if the JSON string is invalid with respect to ConversationDisplayDTO
   */
  public static ConversationDisplayDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationDisplayDTO.class);
  }

  /**
   * Convert an instance of ConversationDisplayDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

