openapi: "3.0.3"
info:
  title: "Buzzchat server API"
  contact:
    email: aymane.menfaa@insa-rennes.fr
  description: "Instant Messaging App server API"
  version: "1.0.0"
servers:
  - url: http://localhost:8080/
security:
  - CookieAuth: [ ]
tags:
  - name: authentication
    description: Authentication endpoints.
  - name: conversation
    description: Conversation management endpoints.
  - name: message
    description: Message management endpoints.
  - name: user
    description: User management endpoints.
  - name: sse
    description: SSE endpoint.  
paths:
  /conversation/addConversation:
    post:
      summary: "Create a new conversation"
      operationId: "addConversation"
      tags:
        - conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileDTO"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationDisplayDTO"
  /conversation/getAllConversationsOfUser:
    get:
      summary: "Get all conversations of the current user"
      operationId: "getAllConversationsOfUser"
      tags:
        - conversation
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /message:
    post:
      summary: "Create a new message"
      operationId: "messagePost"
      tags:
        - message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMessageDTO"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDTO"
  /message/getAllMessagesOfConversation:
    post:
      summary: "Get all messages of a conversation"
      operationId: "getAllMessagesOfConversation"
      tags:
        - message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileDTO"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /message/getLastMessageOfConversation:
    post:
      summary: "Get the last messages of a conversation"
      operationId: "getLastMessageOfConversation"
      tags:
        - message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileDTO"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /message/{messageId}/reactions/{reaction}:
    post:
      summary: "Add reaction to a message"
      operationId: "addReaction"
      tags:
        - message
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "reaction"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"

  /message/{messageId}/reactions:
    delete:
      summary: "Remove reaction from a message"
      operationId: "removeReaction"
      tags:
        - message
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      summary: "Get reactions of a message"
      operationId: "getReaction"
      tags:
        - message
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"

  /message/{messageId}:
    delete:
      summary: "Delete a message"
      operationId: "deleteMessage"
      tags:
        - message
      parameters:
        - name: "messageId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /user/signup:
    post:
      summary: "Sign up a new user"
      operationId: "signup"
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentialsDTO"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /user/signin:
    post:
      summary: "Sign in a user"
      operationId: "signin"
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentialsDTO"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /user/username:
    get:
      summary: "Get the username of the current user"
      operationId: "getUserName"
      tags:
        - user
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/profile:
    get:
      summary: "Get the profile of the current user"
      operationId: "profile"
      tags:
        - user
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileDTO"
  /user/signout:
    post:
      summary: "Sign out the current user"
      operationId: "signout"
      tags:
        - authentication
      responses:
        "200":
          description: "OK"
  /user/{login}:
    delete:
      summary: "Delete a user"
      operationId: "delete"
      tags:
        - user
      parameters:
        - name: "login"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
  /user/is-authenticated:
    get:
      summary: "Check if the user is authenticated"
      operationId: "isAuthenticated"
      tags:
        - authentication
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
  /user/{login}/status/{status}:
    put:
      summary: "Update user status"
      operationId: "updateStatus"
      tags:
        - user
      parameters:
        - name: "login"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "status"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"

  /user/{login}/status:
    get:
      summary: "Get user status"
      operationId: "getUserStatus"
      tags:
        - user
      parameters:
        - name: "login"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /sse/stream:
    get:
      summary: "GET sse/stream"
      operationId: "subscribeToSSEEvents"
      tags:
        - sse
      responses:
        "200":
          description: "OK"
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SseEmitter"
components:
  schemas:
    SseEmitter:
      type: "object"
      properties:
        timeout:
          type: "integer"
          format: "int64"
    ConversationDisplayDTO:
      type: "object"
      properties:
        id:
          type: "string"
        from:
          type: "string"
        to:
          type: "string"
        picture:
          type: "string"
        lastMessage:
          type: "string"
        timestamp:
          type: "integer"
          format: "int64"
    NewMessageDTO:
      type: "object"
      properties:
        to:
          type: "string"
        type:
          type: "string"
        body:
          type: "string"
    MessageDTO:
      type: "object"
      properties:
        timestamp:
          type: "integer"
          format: "int64"
        from:
          type: "string"
        to:
          type: "string"
        type:
          type: "string"
        body:
          type: "string"
    UserCredentialsDTO:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        nom:
          type: "string"
        prenom:
          type: "string"
        dateDeNaissance:
          type: "string"
        photo:
          type: "string"
    Message:
      type: "object"
      properties:
        id:
          type: "string"
        timestamp:
          type: "integer"
          format: "int64"
        from:
          type: "string"
        to:
          type: "string"
        type:
          type: "string"
        body:
          type: "string"
    UserProfileDTO:
      type: "object"
      properties:
        login:
          type: "string"
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
        message:
          type: "string"
    HttpHeaders:
      type: "object"
      properties: {}
    Object:
      type: "object"
      properties: { }

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
      description: "Use a session cookie to authenticate (see /signin)."
x-samples-languages:
  - curl
  - javascript
  - node
  - java
  - python
  - php



